import math

def square(x):
	return x*x

def sqdist(p,q):
	return square(p[0]-q[0])+square(p[1]-q[1])
	
	
def closestpair(L):
	# Recibe una lista
	# Se supone una mejor distancia:
	best = [sqdist(L[0],L[1]), (L[0],L[1])]
	
	def testpair(p,q):
		d = sqdist(p,q)
		if d < best[0]:
			best[0] = d
			best[1] = p,q
			
	# se combinan las listas
	def merge(A,B):
		i = 0
		j = 0
		while i < len(A) or j < len(B):
			if j >= len(B) or (i < len(A) and A[i][1] <= B[j][1]):
				yield A[i]
				i += 1
			else:
				yield B[j]
				j += 1

	
	def recur(L):
		if len(L) < 2:
			return L
		split = len(L)/2
		splitx = L[split][0]
		L = list(merge(recur(L[:split]), recur(L[split:])))	# recurrencia

		# Find possible closest pair across split line
		# Note: this is not quite the same as the algorithm described in class, because
		# we use the global minimum distance found so far (best[0]), instead of
		# the best distance found within the recursive calls made by this call to recur().
		# This change reduces the size of E, speeding up the algorithm a little.
		#
		E = [p for p in L if abs(p[0]-splitx) < best[0]]
		for i in range(len(E)):
			for j in range(1,8):
				if i+j < len(E):
					testpair(E[i],E[i+j])
		return L
	
	L.sort()
	recur(L)
	return best[1]


	
N = int(raw_input())
while(N != 0):
	points = []
	for i in range(N):
		p,q = map(int,raw_input().split(" "))
		points.append((p,q))
	
	best_points = closestpair(points)
	dist = math.sqrt(sqdist(best_points[0], best_points[1]))
	if dist > 10000: print "INFINITY"
	else: print dist
	N = int(raw_input())
